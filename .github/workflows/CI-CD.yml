name: CI/CD

on:
  push:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: test
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
      redis:
        image: redis:latest
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
    - uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.13"

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        pip install -r requirements.txt
        pip install pytest
        pip install -e .


    - name: Run tests
      run: pytest
      env:
        GROUP_TOKEN: ${{ secrets.GROUP_TOKEN }}
        MY_TOKEN: ${{ secrets.MY_TOKEN }}
        DATABASE_URL: "postgresql+asyncpg://test:test@localhost:5432/test"
        TEST_DATABASE_URL: "postgresql+asyncpg://test:test@localhost:5432/test"
        REDIS_HOST: "localhost"

  deploy:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.13"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Checkout репозитория
        uses: actions/checkout@v4

      - name: Проверка наличия Dockerfile
        run: ls -lah

      - name: Включить BuildKit
        run: export DOCKER_BUILDKIT=1

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Сборка и отправка образа

      - name: Build and push securely
        run: |
          export DOCKER_BUILDKIT=1
          docker build --secret id=group_token,env=GROUP_TOKEN \
                       --secret id=my_token,env=MY_TOKEN \
                       --secret id=database_url,env=DATABASE_URL \
                       --secret id=redis_host,env=REDIS_HOST \
                       -t ghcr.io/${{ vars.DOCKER_USERNAME }}/${{ github.event.repository.name }}:latest .
          docker push ghcr.io/${{ vars.DOCKER_USERNAME }}/${{ github.event.repository.name }}:latest

      - name: Check for secrets in logs
        run: |
          if grep -r "${{ secrets.GROUP_TOKEN }}" logs/; then exit 1; fi
